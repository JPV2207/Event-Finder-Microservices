# Events block: Configures worker connection settings for Nginx
events {
    worker_connections 1024;  # Maximum simultaneous connections each worker process can handle
}

# HTTP block: Contains configuration for HTTP servers
http {
    # Logging settings for access and error logs (using Windows file paths)
    access_log C:/nginx/logs/access.log;  # Log all HTTP requests
    error_log C:/nginx/logs/error.log warn;  # Log errors with warning level or higher

    # Main server block: Acts as the API Gateway for routing to microservices
    server {
        listen 8080;  # Listen for incoming connections on port 8080
        server_name localhost;  # Server name for this block (localhost for local development)

        # Default route: Returns a message to confirm the API Gateway is running
        location / {
            return 200 "API Gateway for Event Finder Microservices is running\n";
        }

        # User Service: Routes requests starting with /api/users/ to the user service
        location /api/users/ {
            proxy_pass http://localhost:4000/api/users/;  # Forward requests to user service on port 4000
            proxy_set_header Host $host;  # Pass the original host header
            proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the client's IP chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Pass the protocol (http/https)
            proxy_set_header Authorization $http_authorization;  # Pass JWT token for authentication
        }

        # Event Service: Routes requests starting with /api/events/ to the event service
        location /api/events/ {
            proxy_pass http://localhost:6000/api/events/;  # Forward requests to event service on port 6000
            proxy_set_header Host $host;  # Pass the original host header
            proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the client's IP chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Pass the protocol (http/https)
            proxy_set_header Authorization $http_authorization;  # Pass JWT token for authentication
        }

        # Organizer Service: Routes requests starting with /api/organizer/ to the organizer service
        location /api/organizer/ {
            proxy_pass http://localhost:8000/api/organizer/;  # Forward requests to organizer service on port 8000
            proxy_set_header Host $host;  # Pass the original host header
            proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the client's IP chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Pass the protocol (http/https)
            proxy_set_header Authorization $http_authorization;  # Pass JWT token for authentication
        }

        # Admin Service: Routes requests starting with /api/organizer-applications/ to the admin service
        location /api/organizer-applications/ {
            proxy_pass http://localhost:7000/api/organizer-applications/;  # Forward requests to admin service on port 7000
            proxy_set_header Host $host;  # Pass the original host header
            proxy_set_header X-Real-IP $remote_addr;  # Pass the client's real IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the client's IP chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Pass the protocol (http/https)
            proxy_set_header Authorization $http_authorization;  # Pass JWT token for authentication
        }

        # Health check route for User Service: Forwards to user service health endpoint
        location /api/user/health {
            proxy_pass http://localhost:4000/health;  # Forward to user service health check on port 4000
        }

        # Health check route for Event Service: Forwards to event service health endpoint
        location /api/event/health {
            proxy_pass http://localhost:6000/health;  # Forward to event service health check on port 6000
        }

        # Health check route for Organizer Service: Forwards to organizer service health endpoint
        location /api/organizer/health {
            proxy_pass http://localhost:8000/health;  # Forward to organizer service health check on port 8000
        }

        # Health check route for Admin Service: Forwards to admin service health endpoint
        location /api/admin/health {
            proxy_pass http://localhost:7000/health;  # Forward to admin service health check on port 7000
        }

        # Error page configuration for 5xx errors
        error_page 500 502 503 504 /50x.html;  # Redirect 5xx errors to custom error page
        location = /50x.html {
            root html;  # Serve error page from the html directory
            internal;  # Restrict access to internal use only
        }
    }
}
